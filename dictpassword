#!/usr/bin/env python
import random

def dict_password(wordlist, N):
  '''
  Selects words from the list from N bernoulli random trials. That
  is, returns N words uniformly sampled from the input list of 
  words, wordlist
  '''

  # seed the random number generator with the current system time
  random.seed() 
  # get some random samples
  password = [word.lower() for word in random.sample(wordlist, N)]
  return password


if __name__ == '__main__':
  from argparse import ArgumentParser
  from math import log10
  import os

  # parse the input arguments
  parser = ArgumentParser(description='Generates a password from uniformly sampled dictionary words')
  parser.add_argument('-w', '--wordlist', 
    help='A custom wordlist file containing one word per line. The default is /usr/share/dict/words')
  parser.add_argument('N', metavar='N', type=int,
    help='The number of random trials (words)')
  args = parser.parse_args()

  # get the wordlist
  if not args.wordlist:
    args.wordlist = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'english-common')

  with open(args.wordlist, 'r') as f:
    # generate the password
    words = f.read().splitlines()
    password_list = dict_password(words, args.N)
    password_hr = '-'.join(password_list)
    password = ''.join(password_list)
    entropy = len(password) * log10(26.0)/log10(2.0)
    print password + '  (' + password_hr + ')  Entropy ' + str(entropy) + ' bits'

